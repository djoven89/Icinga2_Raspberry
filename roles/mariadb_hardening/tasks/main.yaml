---

##
## Configuración sobre el directorio de datos
##

- name: Comprobando si existe el directorio por defecto de Mariadb
  stat:
    path: /var/lib/mysql/
  register: db_default_dir

- name: Cambiando el directorio de datos
  block:
    - name: Creando el nuevo directorio de datos
      file:
        path: "{{ db_data }}"
        recurse: yes
        state: directory
        owner: mysql
        group: mysql
        mode: 0755

    - name: Parando el servicio
      systemd:
        name: mariadb
        state: stopped

    - name: Copiando la información del directorio original
      command: |
        rsync -avzh . {{ db_data }}
      args:
        chdir: /var/lib/mysql/

    - name: Renombrando el directorio de Mariadb original
      command: mv /var/lib/mysql/ /var/lib/mysql_original/

    - name: Estableciendo el nuevo directorio de datos a la configuración
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '/var/lib/mysql'
        replace: "{{ db_data }}"

    - name: Iniciando el servicio
      systemd:
        name: mariadb
        state: started

  when:
    - db_default_dir['stat']['isdir'] is defined
    - db_default_dir['stat']['isdir']
    - db_data != '/var/lib/mysql'


##
## Deshabilitando el archivo de log '.mysql_history'
##

- name: Creando la variable de entorno para denegar el almacenamiento de las consultas SQL al log
  lineinfile:
    path: /etc/profile.d/mysql_history.sh
    line: '# Impidiendo el almacenamiento de secuencias SQL\MYSQL_HISTFILE=/dev/null'
    create: yes

- name: Eliminando los archivos archivo de log de las consultas
  shell: find /home/ /root/ -type f -name ".mysql_history" -exec rm {} \;

- name: Buscando los usuarios
  find:
    paths: /home/
    recurse: no
    file_type: directory
  register: home_users

- name: Creando un enlace simbólico a null para para el archivo 'mysql_history' para los usuarios del sistema
  file:
    src: '/dev/null'
    dest: "{{ item ['path'] }}/.mysql_history"
    state: link
    force: yes
  with_items:
    - "{{ home_users['files'] }}"

- name: Creando un enlace simbólico a null también para el usuario 'root'
  file:
    src: '/dev/null'
    dest: '/root/.mysql_history'
    state: link
    force: yes


##
## Configuración el plugin de validación de contraseñas
##

- name: Comprobando si el plugin de validación está instalado
  command: mysql -u {{ db_user}} -p'{{ db_user_password }}' -e "SELECT plugin_status FROM information_schema.plugins WHERE plugin_name='simple_password_check';"
  no_log: true
  register: plugin_status

- name: Instalando el plugin
  command: mysql -u {{ db_user}} -p'{{ db_user_password }}' -e "INSTALL SONAME 'simple_password_check';"
  register: plugin_activation
  when: plugin_status['stdout'] == ''

- name: Descomentando la configuración del plugin
  replace:
    path: /etc/mysql/mariadb.conf.d/50-server.cnf
    regexp: '^# simple_password_check'
    replace: 'simple_password_check'
  when: plugin_status['stdout'] == 'ACTIVE' or plugin_activation is changed
  notify: mariadb restart


##
## Deshabilitando el plugin de autenticación 'auth_socket'
##

- name: Comprobando si está instalado el plugin 'auth_socket'
  command: |
    mysql -N -B -u {{ db_user}} -p'{{ db_user_password }}' mysql -e "SELECT plugin_status FROM information_schema.plugins WHERE plugin_name='unix_socket';"
  no_log: true
  register: auth_plugin

- name: Deshabilitando el plugin
  block:
    - name: Deshabilitando el plugin
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^# disable_unix_socket'
        replace: 'disable_unix_socket'
      notify: mariadb restart

    - name: Comprobando qué usuarios usan el plugin
      command: |
        mysql -N -B -u {{ db_user}} -p'{{ db_user_password }}' mysql -e "SELECT user FROM user where plugin='auth_socket';"
      no_log: true
      register: auth_plugin_users

    - name: Mostrando los usuarios que usan el plugin 'auth_socket'
      debug:
        msg: "Usuario: {{ auth_plugin_users['stdout_lines'] }}"
      when: auth_plugin_users['stdout'] != ''

  when: auth_plugin['stdout'] == 'ACTIVE'


##
## Eliminando los datos por defecto de la base de datos
##

- name: Borrando la base de datos 'test'
  mysql_db:
    name: test
    state: absent
    login_user: "{{ db_user}}"
    login_password: "{{ db_user_password }}"
  no_log: true

- name: Eliminando los accesos anónimos
  mysql_user:
    name: ''
    host_all: yes
    state: absent
    login_user: "{{ db_user}}"
    login_password: "{{ db_user_password }}"
  no_log: true


##
## Renombrando al usuario 'root'
##

- name: Obteniendo las cuentas de 'root' de la base de datos
  command: |
    mysql -N -B -u {{ db_user}} -p'{{ db_user_password }}' mysql -e "SELECT host FROM user WHERE user='root';"
  register: root_accounts
  no_log: true

- name: Mostrando el resultado
  debug:
    msg: "Host: {{ item }}"
  with_items:
    - "{{ root_accounts['stdout']['split']('\n') }}"
  when: root_accounts['stdout'] != ''

- name: Renombrando las cuentas del usuario 'root'
  command: |
    mysql -u {{ db_user}} -p'{{ db_user_password }}' mysql -e "RENAME USER 'root'@'{{ item }}' TO '{{ db_root_rename }}'@'{{ item }}'; FLUSH PRIVILEGES;"
  no_log: true
  with_items:
    - "{{ root_accounts['stdout']['split']('\n') }}"
  when:
    - root_accounts['stdout'] != ''
    - db_root_rename != ''

- name: Estableciendo el nuevo usuario de la base de datos
  set_fact:
    db_user: "{{ db_root_rename }}"

- name: Mensaje de fin del rol
  debug:
    msg: "Rol ejecutado con éxito. Recomendable borrar el directorio '/var/lib/mysql/' en caso de haberlo cambiado."

...
